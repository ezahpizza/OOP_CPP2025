#include <iostream>

class Counter {
private:
    int count;

public:
    // Constructor
    Counter(int c = 0) : count(c) {}

    // Display the current value
    void display() const {
        std::cout << "Count: " << count << std::endl;
    }

    // Get the current value
    int getValue() const {
        return count;
    }

    // Overload prefix increment operator (++obj)
    // Returns reference to the incremented object
    Counter& operator++() {
        // Increment count
        ++count;
        // Return reference to the updated object
        return *this;
    }

    // Overload postfix increment operator (obj++)
    // Takes a dummy int parameter to distinguish from prefix version
    // Returns a copy of the original object before increment
    Counter operator++(int) {
        // Create a copy of the current object
        Counter temp = *this;
        // Increment the current object
        ++count;
        // Return the copy (original value)
        return temp;
    }
};

int main() {
    Counter c1(5);
    std::cout << "Initial value:" << std::endl;
    c1.display();

    // Using prefix increment
    std::cout << "\nUsing prefix increment (++c1):" << std::endl;
    ++c1;
    c1.display();

    // Using prefix increment with assignment
    std::cout << "\nUsing prefix increment with assignment (c2 = ++c1):" << std::endl;
    Counter c2 = ++c1;
    std::cout << "c1 after increment: ";
    c1.display();
    std::cout << "c2 after assignment: ";
    c2.display();

    // Using postfix increment
    std::cout << "\nUsing postfix increment (c1++):" << std::endl;
    Counter c3 = c1++;
    std::cout << "c1 after increment: ";
    c1.display();
    std::cout << "c3 after assignment: ";
    c3.display();

    // Chaining prefix increment
    std::cout << "\nChaining prefix increment (c4 = ++(++c1)):" << std::endl;
    Counter c4 = ++(++c1);
    std::cout << "c1 after chain increment: ";
    c1.display();
    std::cout << "c4 after assignment: ";
    c4.display();

    return 0;
}